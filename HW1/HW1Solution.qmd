---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 27 @ 11:59PM
author: Zoe Zhao and (UID 106070449)
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

**Solution:** Done

2. Create a **private** repository `biostat-203b-2023-winter` and add `Hua-Zhou` and `tomokiokuno0528` as your collaborators with write permission.

**Solution:** Done

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `master` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `master` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in `main` branch.

**Solution:** Done

4. After each homework due date, course reader and instructor will check out your `master` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

**Solution:** Done

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Solution:** Done


## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data](https://mimic-iv.mit.edu), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. (Hint: The CITI training takes a couple hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Link to the completion report : ** <https://www.citiprogram.org/verify/?kdcd09fb1-e73c-4d63-8b57-3c29998c7c9b-53914118>

**Link to the completion certificate : ** <https://www.citiprogram.org/verify/?wfb1ae954-1f90-4467-ae24-19d609bb57b6-53914118>

## Q3. Linux Shell Commands

1. The `~/mimic` folder within the Docker container contains data sets from MIMIC-IV. Refer to the documentation <https://mimic.mit.edu/docs/iv/> for details of data files.  
```{bash}
ls -l ~/mimic/ 
```

Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files on storage and are not big data friendly practices. Just read from the data folder `~/mimic` directly in following exercises. 

Use Bash commands to answer following questions.

**Solution: ** Done  

2. Display the contents in the folders `core`, `hosp`, `icu`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

```{bash}
ls -l ~/mimic/core
```

```{bash}
ls -l ~/mimic/hosp
```

```{bash}
ls -l ~/mimic/icu
```

**Solution:** The "csv.gz" files are a compressed form of the cvs file. The CSV.GZ is a CSV file compressed with gzip utility. Unzip the compressed file will generate the csv files. The CSV file is the file in which information is separated by commas.

3. Briefly describe what bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**Solution:** These are the command used on the compressed file. 
(zcat, zless, zmore, and zgrep) equals (cat, less, more, and grep)

'zcat' uncompresses either a list of files on the command line or its standard input and writes the uncompressed data on standard output.

'zless' and zmore  are filters which allows examination of compressed or plain text files one screenful at a time on a soft-copy terminal.
(The less is more powerful than more.) 

'zgrep' command is used to search out expressions from a given a file even if it is compressed.

4. What's the output of the following bash script?
```{bash}
#| eval: True
for datafile in ~/mimic/core/*.gz
do
  ls -l $datafile
done
```
**Solution** It finds out all the datafiles in the folder "~/mimic/core/" that ends with a name of "gz" and print the names and information of them out one by one, as a long format with it "ls" information results.

Display the number of lines in each data file using a similar loop.

```{bash}
for datafile in ~/mimic/core/*gz
  do
  ls $datafile
  gzcat $datafile | wc -l 
  done
```
**Solution: ** : 523741 in admissions.csv.gz,   382279 in patients.csv.gz,  2189536, transfers.csv.gz. 

5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)


**Display the first few lines of `admissions.csv.gz`.**

```{bash}
gzcat ~/mimic/core/admissions.csv.gz | head -10
```
**Solution: ** The first 10 rows displayed  by the command above

**How many rows are in this data file?**

**-Show the first lines of the data**
```{bash}
gzcat ~/mimic/core/admissions.csv.gz | head -3
```
**-Show the last lines of the data**
```{bash}
gzcat ~/mimic/core/admissions.csv.gz | tail -3
```


**Findings: ** Based on the result we know that the first line is the name of the variables and start from the second line, each line is a patient.  
We use the awk command to ignore the first row and use the we -l to count the number of the lines which could represent the number of the rows. 
```{bash}
gzcat ~/mimic/core/admissions.csv.gz | awk  '  NR > 1  ' | wc -l 
```


**Solution:**  There are 523740 rows in this file

**How many unique patients (identified by `subject_id`) are in this data file?**

```{bash}
gzcat ~/mimic/core/admissions.csv.gz | \
awk -F , ' NR > 1 { print $1 } ' | sort -u | uniq -c | wc -l
```

**Solution: **  There are 256878 unique patients in this file


6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on.)

**6.1: admission-type**

```{bash}
gzcat ~/mimic/core/admissions.csv.gz | \
awk -F , ' NR > 1 { print $6 } ' | sort | uniq -c 
```
**6.2: admission_location**

```{bash}
gzcat ~/mimic/core/admissions.csv.gz | \
awk -F , ' NR > 1 { print $7 } ' | sort | uniq -c 
```

**6.3 insurance**

```{bash}
gzcat ~/mimic/core/admissions.csv.gz | \
awk -F , ' NR > 1 { print $9 } ' | sort | uniq -c 
```

**6.4 ethnicity**

```{bash}
gzcat ~/mimic/core/admissions.csv.gz | \
awk -F , ' NR > 1 { print $12 } ' | sort | uniq -c 
```

## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: True
curl -L -O  http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```

**Solution: ** Done

Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.
```{bash}
#| eval: True
curl -L -O  http://www.gutenberg.org/cache/epub/42671/pg42671.txt

for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  # match word ignoring cases
  cat pg42671.txt | grep -o -i $char | wc -l 
done
```

**Explain what wget -nc does.**
**Solution:** I am not using the wget to finish this quesiton. But based on the 
curl which have a similar function with it. It is a command that downloads 
source code and binaries, and retrieve an entire website or a specific hierarchy at once.
**Solution:**
Elizabeth is mentioned 634 times. 
Jane 294 times. 
Lydia 171 times.
Darcy 418 times.

2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt 
```

**Solution**
The first command use only one ">". It put the string  'hello, world'  into a txt file called: test1.txt.
The second command have two ">" and are used to append the string we want at the end of the original file. 
For the first file, no matter how much time you runit. You will get only one 'hello, world'  in the txt file.
For the second file, the more time you run, the more 'hello, world' lines are appended to the file test2.txt. 

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```




**Solution**: Done

Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: True
chmod 700 ./middle.sh
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**Explain the output.**

**Solution :** The out put means the last 5 rows of the first 20 rows 
(15-20 rows) of the pg42671.txt file.
In the string: "pg42671.txt 20 5", 
$1 is the pg42671.txt. 
$2 is 20, and $3 is 5.

**Why do we need the first line of the shell script?**

**Solution :** The first line is used to identify the shell to execute.

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2021`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.